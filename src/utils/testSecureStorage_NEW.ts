/**
 * Script de test pour v√©rifier le fonctionnement du secureStorage
 */

import secureStorage from './secureStorage';
import { cleanupCorruptedData, diagnoseStorage, resetAllStorage } from './storageCleanup';
import { runFullDebug } from './debugEncryption';

export function testSecureStorage() {
  console.log('üîß Test du syst√®me secureStorage...');

  // Test 0: Diagnostic initial
  console.log('\nüîç Test 0: Diagnostic initial');
  const initialDiag = diagnoseStorage();
  console.log(`√âtat initial: ${initialDiag.totalItems} √©l√©ments, ${initialDiag.corruptedItems} corrompus`);

  // Test 1: Stockage et r√©cup√©ration basiques
  console.log('\nüìù Test 1: Stockage et r√©cup√©ration basiques');
  const testKey = 'test-key';
  const testData = 'Hello, World!';
  
  const stored = secureStorage.setItem(testKey, testData);
  console.log(`Stockage r√©ussi: ${stored}`);
  
  const retrieved = secureStorage.getItem(testKey);
  console.log(`Donn√©es r√©cup√©r√©es: ${retrieved}`);
  console.log(`Correspondance: ${retrieved === testData}`);

  // Test 2: Simulation de donn√©es non chiffr√©es
  console.log('\nüîÑ Test 2: Simulation de donn√©es non chiffr√©es');
  const legacyKey = 'legacy-note';
  const legacyData = 'This is a legacy note';
  
  // Stocker directement dans localStorage (simulation de donn√©es anciennes)
  localStorage.setItem(legacyKey, legacyData);
  console.log(`Donn√©es legacy stock√©es: ${legacyData}`);
  
  // Essayer de r√©cup√©rer avec secureStorage (doit d√©clencher la migration)
  const migratedData = secureStorage.getItem(legacyKey);
  console.log(`Donn√©es migr√©es: ${migratedData}`);
  console.log(`Migration r√©ussie: ${migratedData === legacyData}`);

  // Test 3: V√©rification que les donn√©es sont maintenant chiffr√©es
  console.log('\nüîí Test 3: V√©rification du chiffrement');
  const encryptedData = localStorage.getItem('__encrypted__' + legacyKey);
  console.log(`Donn√©es chiffr√©es stock√©es: ${encryptedData ? 'Oui' : 'Non'}`);
  console.log(`Anciennes donn√©es supprim√©es: ${!localStorage.getItem(legacyKey)}`);

  // Test 4: Migration globale
  console.log('\nüåê Test 4: Migration globale');
  
  // Ajouter quelques donn√©es non chiffr√©es pour tester
  localStorage.setItem('note-1', 'Note 1 content');
  localStorage.setItem('note-2', 'Note 2 content');
  localStorage.setItem('snippet-1', 'console.log("Hello");');
  
  const migrationResult = secureStorage.migrateAllData();
  console.log(`Migration globale termin√©e:`);
  console.log(`  - Total: ${migrationResult.total}`);
  console.log(`  - Migr√©s: ${migrationResult.migrated}`);
  console.log(`  - Erreurs: ${migrationResult.errors.length}`);
  
  if (migrationResult.errors.length > 0) {
    console.log('  - D√©tails des erreurs:', migrationResult.errors);
  }

  // Test 5: Statistiques
  console.log('\nüìä Test 5: Statistiques');
  const stats = secureStorage.getStats();
  console.log(`Statistiques:`);
  console.log(`  - √âl√©ments: ${stats.totalItems}`);
  console.log(`  - Taille totale: ${stats.totalSize} bytes`);
  console.log(`  - √âl√©ments expir√©s: ${stats.expiredItems}`);
  console.log(`  - √âl√©ment le plus ancien: ${stats.oldestItem ? new Date(stats.oldestItem).toISOString() : 'N/A'}`);

  // Test 6: Nettoyage
  console.log('\nüßπ Test 6: Nettoyage');
  const cleanedItems = secureStorage.cleanup();
  console.log(`√âl√©ments nettoy√©s: ${cleanedItems}`);

  // Test 7: Diagnostic final
  console.log('\nüîç Test 7: Diagnostic final');
  const finalDiag = diagnoseStorage();
  console.log(`√âtat final: ${finalDiag.totalItems} √©l√©ments, ${finalDiag.corruptedItems} corrompus`);

  console.log('\n‚úÖ Tests termin√©s!');
}

// Fonction pour nettoyer les donn√©es de test
export function cleanupTestData() {
  console.log('üßπ Nettoyage des donn√©es de test...');
  
  const testKeys = [
    'test-key',
    'legacy-note',
    'note-1',
    'note-2',
    'snippet-1'
  ];
  
  testKeys.forEach(key => {
    secureStorage.removeItem(key);
    localStorage.removeItem(key); // Au cas o√π
  });
  
  console.log('‚úÖ Nettoyage termin√©!');
}

// Fonction pour nettoyer les donn√©es corrompues
export function cleanupCorrupted() {
  console.log('üßπ Nettoyage des donn√©es corrompues...');
  const result = cleanupCorruptedData();
  console.log(`R√©sultat: ${result.cleaned} supprim√©s, ${result.preserved} pr√©serv√©s`);
  if (result.errors.length > 0) {
    console.log('Erreurs:', result.errors);
  }
  return result;
}

// Fonction de diagnostic
export function runDiagnostic() {
  console.log('üîç Diagnostic du stockage...');
  const result = diagnoseStorage();
  console.log('R√©sultat:', result);
  return result;
}

// Fonction de debug complet
export function runDebugTests() {
  console.log('üîß Debug complet du syst√®me de chiffrement...');
  const result = runFullDebug();
  console.log('Debug termin√©:', result);
  return result;
}

// Fonction de remise √† z√©ro (ATTENTION: destructive)
export function resetStorage() {
  console.log('üö® ATTENTION: Remise √† z√©ro du stockage!');
  const result = resetAllStorage();
  console.log(`Remise √† z√©ro: ${result ? 'R√©ussie' : '√âchou√©e'}`);
  return result;
}
